/*
function findDips(numDips, dipVolume, dipLength, volumes) {
    let dipCount = 0;
    let dipStartIndex = -1;
  
    for (let i = 0; i < volumes.length; i++) {
      if (volumes[i] < dipVolume) {
        if (dipCount === 0) {
          dipStartIndex = i;
        }
        dipCount++;
      } else {
        if (dipCount >= dipLength) {
          console.log(`Dip ${dipCount}: Start Index: ${dipStartIndex}, End Index: ${i - 1}`);
          numDips--;
        }
        dipCount = 0;
      }
  
      if (numDips === 0) {
        break;
      }
    }
  }

function findLargestDrops(volumes, targetNumDrops, minDropDistance) {
    let drops = [];
  
    for (let i = 0; i < volumes.length - 2; i++) {
      const currentDrop = volumes[i] - volumes[i + 2];
  
      if (drops.length < targetNumDrops) {
        if (isValidDrop(i, drops, minDropDistance)) {
          drops.push({ index: i, drop: currentDrop });
          drops.sort((a, b) => a.index - b.index);
        }
      } else if (currentDrop > drops[drops.length - 1].drop) {
        if (isValidDrop(i, drops, minDropDistance)) {
          drops.pop();
          drops.push({ index: i, drop: currentDrop });
          drops.sort((a, b) => a.index - b.index);
        }
      }
    }
  
    console.log(`Largest ${targetNumDrops} drops (min distance of ${minDropDistance} seconds):`);
    drops.forEach(drop => {
      console.log(`Index: ${drop.index}, Drop: ${drop.drop}`);
    });
  }
  
  
  
  function isValidDrop(currentIndex, drops, minDropDistance) {
    for (let i = 0; i < drops.length; i++) {
      if (currentIndex - drops[i].index < minDropDistance) {
        return false;
      }
    }
    return true;
  }
  

function findLargestDropIndex(volumes) {
    let largestDropIndex = -1;
    let largestDrop = 0;
  
    for (let i = 0; i < volumes.length - 2; i++) {
      const currentDrop = volumes[i] - volumes[i + 2];
  
      if (currentDrop > largestDrop) {
        largestDrop = currentDrop;
        largestDropIndex = i;
      }
    }
  
    return largestDropIndex;
  }

function findVolumeDips(volumes, threshold, minDipLength) {
    let isInDip = false;
    let dipStartIndex = 0;
    let dipCount = 0;

    for (let i = 0; i < volumes.length; i++) {
        if (volumes[i] <= threshold) {
            if (!isInDip) {
                isInDip = true;
                dipStartIndex = i;
            }
        } else if (isInDip) {
            if (i - dipStartIndex >= minDipLength) {
                console.log(`${dipCount} Dip Start: ${convertSecondsToTime(dipStartIndex)}, End: ${convertSecondsToTime(i - 1)}`);
                dipCount = dipCount + 1
            }
            isInDip = false;
        }
    }

    if (isInDip && volumes.length - dipStartIndex >= minDipLength) {
        console.log(`${dipCount} Dip Start: ${convertSecondsToTime(dipStartIndex)}, End: ${convertSecondsToTime(volumes.length - 1)}`);
        dipCount = dipCount + 1;
    }
}



function getValuesByCount(sortedCounts, count) {
    const result = [];

    for (const [value, occurrence] of Object.entries(sortedCounts)) {
        if (occurrence === count) {
            result.push(parseFloat(value));
        }
    }

    return result;
}

//target number of songs
var n = 12;
//target number of split points
var z = n - 1;

//volume levels in db for input.mp3
//index == second, so zero'th number is volume at zero seconds
var volumes = [-28.2, -21.4, -18.9, -10.6, -13.4, -16.2, -10.2, -7.6, -9.6, -8.8, -7.6, -6.8, -6.5, -8.9, -6.9, -7.1, -7.1, -7.1, -5.6, -6.2, -8.3, -5.8, -5.8, -5.8, -6.5, -5.9, -5.7, -6.6, -7.6, -7, -5.9, -6.9, -9.6, -7, -8.7, -8, -8.7, -8.5, -7.4, -6.4, -6.5, -7.2, -5.8, -5.3, -6.2, -6, -6.6, -6.3, -6.3, -5.7, -7.6, -7.9, -7.9, -7.6, -7.1, -5.7, -5.8, -6.4, -6.9, -8.3, -7.2, -8.9, -7.7, -6.2, -4.2, -7.4, -7.8, -7.6, -7.8, -7.4, -7, -8.1, -6.9, -8.1, -7.8, -7.9, -9.5, -8.5, -7.7, -8.6, -9, -6.9, -7.1, -8.1, -7.1, -6.4, -4.8, -7, -6.5, -7.1, -5.8, -6.9, -7.7, -5.3, -8, -5.7, -6.7, -6.5, -5.3, -5.8, -6.8, -7.2, -6.5, -7.2, -6.2, -5.5, -6.7, -7.4, -8.3, -10.4, -18.3, -28, -17.8, -29.8, -29.4, -20.7, -30.3, -29.4, -9.1, -12.3, -14.6, -15, -11.1, -12.1, -9.3, -9.6, -8.3, -9, -9.8, -11.9, -9, -9.3, -9.8, -10.1, -12.2, -10.5, -9.9, -11.9, -9.2, -10.9, -9.8, -8.8, -8.5, -10.1, -8.6, -9.3, -9.9, -6.9, -6.9, -10.6, -10.3, -10.4, -10.6, -10.9, -10.8, -10.7, -10.9, -10.2, -10.3, -10.8, -10.2, -10.8, -10.6, -10, -9.5, -9.2, -9.6, -12.4, -9.9, -11.2, -12, -9.8, -12.7, -11.9, -12.6, -9.9, -10.4, -10.8, -13.8, -9.6, -16.9, -11.4, -14.6, -10.7, -11.1, -10.9, -9.6, -8.8, -9.3, -9.4, -8.5, -7.4, -8.3, -8.5, -6.9, -7.8, -7.8, -7.3, -5.8, -5.7, -6.5, -6.1, -6.3, -5.9, -5.5, -4.6, -5.1, -6.1, -8.1, -8.3, -7.9, -7.6, -8.4, -7.2, -8.3, -7.1, -6.8, -8.1, -7.8, -6.6, -5.3, -6, -7.1, -5.5, -6, -7.5, -6.8, -8.2, -8.9, -7.1, -6.4, -14.9, -19.3, -31.2, -31.5, -27.2, -31.3, -29.2, -23.2, -21.1, -21.2, -18.8, -21.4, -12.1, -22, -22.1, -21.2, -20.3, -17.4, -18.4, -17.1, -17.8, -16, -16.7, -16.5, -16.2, -17.6, -18.4, -18.2, -17.1, -18.2, -17.1, -16.9, -17, -18.2, -18.1, -18.7, -18.3, -18.4, -18.6, -15.3, -18.1, -17.6, -17.3, -14, -15.4, -16.5, -12.2, -12.3, -13, -14.1, -9, -9.1, -8.9, -9.8, -9.7, -8.3, -6.8, -4.9, -6.4, -7, -7.2, -5.7, -5.5, -6.7, -7, -6.4, -6.7, -6.7, -6.6, -5.6, -7.1, -7.3, -6.3, -6.7, -7.1, -6.4, -6.4, -5, -4.9, -5.3, -6.8, -6, -6.3, -6.9, -8.4, -7.6, -7.4, -6.6, -7.2, -7.2, -4.6, -5.8, -7.1, -6.7, -7.7, -7.6, -6.8, -7.9, -4.5, -5.7, -7.2, -6.8, -10.8, -7.3, -7.2, -7.1, -6.7, -7.6, -7.2, -7.6, -7.6, -7.7, -8.1, -7.1, -9.6, -8.4, -10.2, -7.4, -8, -6.9, -8, -7.3, -7.2, -6.8, -8.4, -7.3, -7.2, -7.6, -7.4, -10.1, -8.5, -8.1, -7.4, -6.4, -6.5, -7.6, -8, -7.6, -8, -9.4, -7.8, -6.9, -7, -5.1, -6.8, -8.1, -7.8, -7, -7.3, -8.6, -7, -8.7, -13.9, -12.3, -8.6, -9.8, -8.2, -8.5, -8.3, -10.5, -9.8, -9.3, -8.6, -9.1, -9.9, -7.4, -8.1, -8.1, -7.1, -5.7, -6.8, -8.9, -7.5, -5.3, -5.5, -7, -8.2, -17.8, -11.3, -8.9, -8.4, -9.1, -9.3, -8.7, -9.2, -9.2, -8.9, -9.1, -7.9, -8.5, -6.3, -6.9, -8.5, -8, -7.6, -7.4, -6, -6.1, -7.3, -6.1, -6.6, -6.8, -5.7, -6.3, -6.1, -7.7, -9.1, -7.3, -6.2, -5.5, -6.4, -7.2, -7.2, -6.9, -6.2, -7.7, -7.6, -5.8, -7, -6.3, -6.3, -7.6, -7.2, -9.2, -8.8, -10.6, -10.5, -7.6, -7.6, -6.5, -7.1, -8.1, -6.8, -8.6, -9, -9.1, -5.5, -6, -8.2, -9.7, -9.3, -10, -10.8, -11.4, -11, -12.9, -12.2, -8.9, -8.6, -8.4, -8.2, -9.3, -9.7, -10.2, -10.9, -11, -10.6, -11.4, -10.1, -9.4, -9.2, -9, -8.7, -12.6, -8.7, -8.5, -8.7, -9.4, -10.2, -9.5, -8.8, -9.7]
console.log(`volumes.length=${volumes.length}`)

//find min and max
let min = 99;
let max = -99
for (var second = 0; second < volumes.length; second++) {
    console.log(`second=${second}`)
    if (volumes[second] > max) {
        max = volumes[second]
    }
    if (volumes[second] < min) {
        min = volumes[second]
    }
}
console.log(`min=${min} / max=${max}`)

//get counts of each val:
const counts = {};
for (const num of volumes) {
    counts[num] = counts[num] ? counts[num] + 1 : 1;
}

// Convert counts object to an array of key-value pairs
const countsArray = Object.entries(counts);

// Sort the countsArray in descending order based on count values
countsArray.sort((a, b) => b[1] - a[1]);

// Convert the sorted countsArray back to an object
const sortedCounts = Object.fromEntries(countsArray);

console.log('sortedCounts=');
console.log(sortedCounts);


//find z occurences of min (silence)
var valuesWithCount = getValuesByCount(sortedCounts, z);
console.log(`Values occurring ${z} times:`, valuesWithCount);

//use first value
valuesWithCount = valuesWithCount[0]

const indices = [];
volumes.forEach((element, index) => {
    if (element === valuesWithCount) {
        indices.push(index);
    }
});
console.log(`Indices of ${valuesWithCount}:`, indices);

for (var x = 0; x < indices.length; x++) {
    console.log(`${x} : ${convertSecondsToTime(indices[x])}`)
}


findVolumeDips(volumes, -25, 1)

const largestDropIndex = findLargestDropIndex(volumes);
console.log("Largest drop index:", largestDropIndex, ' = ', volumes[largestDropIndex], ',', volumes[largestDropIndex+1], ',', volumes[largestDropIndex+2]);


const targetNumDrops = 3; // Number of largest drops to find
const minDropDistance = 9; // Minimum drop distance in seconds
findLargestDrops(volumes, targetNumDrops, minDropDistance);

console.log('findDips')
findDips(numDips=3, dipVolume=-20, dipLength=5, volumes)
*/

function convertSecondsToTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2, '0');
    return `${formattedMinutes}:${formattedSeconds}`;
}

function convertSecondsToTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2, '0');
    return `${formattedMinutes}:${formattedSeconds}`;
  }
  
  function findIndexesLessThanOrEqualTo(volumes, limit, segmentBreakLength) {
    let gapCount = 0;
    let previousIndex = -1; // Track the previous index
    for (let i = 0; i < volumes.length; i++) {
      if (volumes[i] <= limit) {
        //console.log(`volume: ${volumes[i]} <= limit: ${limit}`)
        const delta = previousIndex === -1 ? 0 : i - previousIndex; // Calculate delta
        //console.log(`delta=${delta}, i=${i}`)
        

        // Add a new line character if delta is greater than or equal to segmentBreakLength
        if (delta >= segmentBreakLength && i !== 0) {
            console.log(`[${gapCount}]------------ Δ >= ${segmentBreakLength}, gap\n`)
            gapCount=gapCount+1
          //output = `\n${output}`; // Insert new line character at the beginning of the output
        }
        console.log(`${i} = ${convertSecondsToTime(i)} : ${volumes[i]} | Δ = ${delta}`);

        
        previousIndex = i; // Update previousIndex
      }
    }
    console.log(`\ngapCount = ${gapCount}`)
  }
  

var volumes_short = [-28.2, -21.4, -18.9, -10.6, -13.4, -16.2, -10.2, -7.6, -9.6, -8.8, -7.6, -6.8, -6.5, -8.9, -6.9, -7.1, -7.1, -7.1, -5.6, -6.2, -8.3, -5.8, -5.8, -5.8, -6.5, -5.9, -5.7, -6.6, -7.6, -7, -5.9, -6.9, -9.6, -7, -8.7, -8, -8.7, -8.5, -7.4, -6.4, -6.5, -7.2, -5.8, -5.3, -6.2, -6, -6.6, -6.3, -6.3, -5.7, -7.6, -7.9, -7.9, -7.6, -7.1, -5.7, -5.8, -6.4, -6.9, -8.3, -7.2, -8.9, -7.7, -6.2, -4.2, -7.4, -7.8, -7.6, -7.8, -7.4, -7, -8.1, -6.9, -8.1, -7.8, -7.9, -9.5, -8.5, -7.7, -8.6, -9, -6.9, -7.1, -8.1, -7.1, -6.4, -4.8, -7, -6.5, -7.1, -5.8, -6.9, -7.7, -5.3, -8, -5.7, -6.7, -6.5, -5.3, -5.8, -6.8, -7.2, -6.5, -7.2, -6.2, -5.5, -6.7, -7.4, -8.3, -10.4, -18.3, -28, -17.8, -29.8, -29.4, -20.7, -30.3, -29.4, -9.1, -12.3, -14.6, -15, -11.1, -12.1, -9.3, -9.6, -8.3, -9, -9.8, -11.9, -9, -9.3, -9.8, -10.1, -12.2, -10.5, -9.9, -11.9, -9.2, -10.9, -9.8, -8.8, -8.5, -10.1, -8.6, -9.3, -9.9, -6.9, -6.9, -10.6, -10.3, -10.4, -10.6, -10.9, -10.8, -10.7, -10.9, -10.2, -10.3, -10.8, -10.2, -10.8, -10.6, -10, -9.5, -9.2, -9.6, -12.4, -9.9, -11.2, -12, -9.8, -12.7, -11.9, -12.6, -9.9, -10.4, -10.8, -13.8, -9.6, -16.9, -11.4, -14.6, -10.7, -11.1, -10.9, -9.6, -8.8, -9.3, -9.4, -8.5, -7.4, -8.3, -8.5, -6.9, -7.8, -7.8, -7.3, -5.8, -5.7, -6.5, -6.1, -6.3, -5.9, -5.5, -4.6, -5.1, -6.1, -8.1, -8.3, -7.9, -7.6, -8.4, -7.2, -8.3, -7.1, -6.8, -8.1, -7.8, -6.6, -5.3, -6, -7.1, -5.5, -6, -7.5, -6.8, -8.2, -8.9, -7.1, -6.4, -14.9, -19.3, -31.2, -31.5, -27.2, -31.3, -29.2, -23.2, -21.1, -21.2, -18.8, -21.4, -12.1, -22, -22.1, -21.2, -20.3, -17.4, -18.4, -17.1, -17.8, -16, -16.7, -16.5, -16.2, -17.6, -18.4, -18.2, -17.1, -18.2, -17.1, -16.9, -17, -18.2, -18.1, -18.7, -18.3, -18.4, -18.6, -15.3, -18.1, -17.6, -17.3, -14, -15.4, -16.5, -12.2, -12.3, -13, -14.1, -9, -9.1, -8.9, -9.8, -9.7, -8.3, -6.8, -4.9, -6.4, -7, -7.2, -5.7, -5.5, -6.7, -7, -6.4, -6.7, -6.7, -6.6, -5.6, -7.1, -7.3, -6.3, -6.7, -7.1, -6.4, -6.4, -5, -4.9, -5.3, -6.8, -6, -6.3, -6.9, -8.4, -7.6, -7.4, -6.6, -7.2, -7.2, -4.6, -5.8, -7.1, -6.7, -7.7, -7.6, -6.8, -7.9, -4.5, -5.7, -7.2, -6.8, -10.8, -7.3, -7.2, -7.1, -6.7, -7.6, -7.2, -7.6, -7.6, -7.7, -8.1, -7.1, -9.6, -8.4, -10.2, -7.4, -8, -6.9, -8, -7.3, -7.2, -6.8, -8.4, -7.3, -7.2, -7.6, -7.4, -10.1, -8.5, -8.1, -7.4, -6.4, -6.5, -7.6, -8, -7.6, -8, -9.4, -7.8, -6.9, -7, -5.1, -6.8, -8.1, -7.8, -7, -7.3, -8.6, -7, -8.7, -13.9, -12.3, -8.6, -9.8, -8.2, -8.5, -8.3, -10.5, -9.8, -9.3, -8.6, -9.1, -9.9, -7.4, -8.1, -8.1, -7.1, -5.7, -6.8, -8.9, -7.5, -5.3, -5.5, -7, -8.2, -17.8, -11.3, -8.9, -8.4, -9.1, -9.3, -8.7, -9.2, -9.2, -8.9, -9.1, -7.9, -8.5, -6.3, -6.9, -8.5, -8, -7.6, -7.4, -6, -6.1, -7.3, -6.1, -6.6, -6.8, -5.7, -6.3, -6.1, -7.7, -9.1, -7.3, -6.2, -5.5, -6.4, -7.2, -7.2, -6.9, -6.2, -7.7, -7.6, -5.8, -7, -6.3, -6.3, -7.6, -7.2, -9.2, -8.8, -10.6, -10.5, -7.6, -7.6, -6.5, -7.1, -8.1, -6.8, -8.6, -9, -9.1, -5.5, -6, -8.2, -9.7, -9.3, -10, -10.8, -11.4, -11, -12.9, -12.2, -8.9, -8.6, -8.4, -8.2, -9.3, -9.7, -10.2, -10.9, -11, -10.6, -11.4, -10.1, -9.4, -9.2, -9, -8.7, -12.6, -8.7, -8.5, -8.7, -9.4, -10.2, -9.5, -8.8, -9.7]
var volumes_full = [-28.2,-21.4,-18.9,-10.6,-13.4,-16.2,-10.2,-7.6,-9.6,-8.8,-7.6,-6.8,-6.5,-8.9,-6.9,-7.1,-7.1,-7.1,-5.6,-6.2,-8.3,-5.8,-5.8,-5.8,-6.5,-5.9,-5.7,-6.6,-7.6,-7,-5.9,-6.9,-9.6,-7,-8.7,-8,-8.7,-8.5,-7.4,-6.4,-6.5,-7.2,-5.8,-5.3,-6.2,-6,-6.6,-6.3,-6.3,-5.7,-7.6,-7.9,-7.9,-7.6,-7.1,-5.7,-5.8,-6.4,-6.9,-8.3,-7.2,-8.9,-7.7,-6.2,-4.2,-7.4,-7.8,-7.6,-7.8,-7.4,-7,-8.1,-6.9,-8.1,-7.8,-7.9,-9.5,-8.5,-7.7,-8.6,-9,-6.9,-7.1,-8.1,-7.1,-6.4,-4.8,-7,-6.5,-7.1,-5.8,-6.9,-7.7,-5.3,-8,-5.7,-6.7,-6.5,-5.3,-5.8,-6.8,-7.2,-6.5,-7.2,-6.2,-5.5,-6.7,-7.4,-8.3,-10.4,-18.3,-28,-17.8,-29.8,-29.4,-20.7,-30.3,-29.4,-9.1,-12.3,-14.6,-15,-11.1,-12.1,-9.3,-9.6,-8.3,-9,-9.8,-11.9,-9,-9.3,-9.8,-10.1,-12.2,-10.5,-9.9,-11.9,-9.2,-10.9,-9.8,-8.8,-8.5,-10.1,-8.6,-9.3,-9.9,-6.9,-6.9,-10.6,-10.3,-10.4,-10.6,-10.9,-10.8,-10.7,-10.9,-10.2,-10.3,-10.8,-10.2,-10.8,-10.6,-10,-9.5,-9.2,-9.6,-12.4,-9.9,-11.2,-12,-9.8,-12.7,-11.9,-12.6,-9.9,-10.4,-10.8,-13.8,-9.6,-16.9,-11.4,-14.6,-10.7,-11.1,-10.9,-9.6,-8.8,-9.3,-9.4,-8.5,-7.4,-8.3,-8.5,-6.9,-7.8,-7.8,-7.3,-5.8,-5.7,-6.5,-6.1,-6.3,-5.9,-5.5,-4.6,-5.1,-6.1,-8.1,-8.3,-7.9,-7.6,-8.4,-7.2,-8.3,-7.1,-6.8,-8.1,-7.8,-6.6,-5.3,-6,-7.1,-5.5,-6,-7.5,-6.8,-8.2,-8.9,-7.1,-6.4,-14.9,-19.3,-31.2,-31.5,-27.2,-31.3,-29.2,-23.2,-21.1,-21.2,-18.8,-21.4,-12.1,-22,-22.1,-21.2,-20.3,-17.4,-18.4,-17.1,-17.8,-16,-16.7,-16.5,-16.2,-17.6,-18.4,-18.2,-17.1,-18.2,-17.1,-16.9,-17,-18.2,-18.1,-18.7,-18.3,-18.4,-18.6,-15.3,-18.1,-17.6,-17.3,-14,-15.4,-16.5,-12.2,-12.3,-13,-14.1,-9,-9.1,-8.9,-9.8,-9.7,-8.3,-6.8,-4.9,-6.4,-7,-7.2,-5.7,-5.5,-6.7,-7,-6.4,-6.7,-6.7,-6.6,-5.6,-7.1,-7.3,-6.3,-6.7,-7.1,-6.4,-6.4,-5,-4.9,-5.3,-6.8,-6,-6.3,-6.9,-8.4,-7.6,-7.4,-6.6,-7.2,-7.2,-4.6,-5.8,-7.1,-6.7,-7.7,-7.6,-6.8,-7.9,-4.5,-5.7,-7.2,-6.8,-10.8,-7.3,-7.2,-7.1,-6.7,-7.6,-7.2,-7.6,-7.6,-7.7,-8.1,-7.1,-9.6,-8.4,-10.2,-7.4,-8,-6.9,-8,-7.3,-7.2,-6.8,-8.4,-7.3,-7.2,-7.6,-7.4,-10.1,-8.5,-8.1,-7.4,-6.4,-6.5,-7.6,-8,-7.6,-8,-9.4,-7.8,-6.9,-7,-5.1,-6.8,-8.1,-7.8,-7,-7.3,-8.6,-7,-8.7,-13.9,-12.3,-8.6,-9.8,-8.2,-8.5,-8.3,-10.5,-9.8,-9.3,-8.6,-9.1,-9.9,-7.4,-8.1,-8.1,-7.1,-5.7,-6.8,-8.9,-7.5,-5.3,-5.5,-7,-8.2,-17.8,-11.3,-8.9,-8.4,-9.1,-9.3,-8.7,-9.2,-9.2,-8.9,-9.1,-7.9,-8.5,-6.3,-6.9,-8.5,-8,-7.6,-7.4,-6,-6.1,-7.3,-6.1,-6.6,-6.8,-5.7,-6.3,-6.1,-7.7,-9.1,-7.3,-6.2,-5.5,-6.4,-7.2,-7.2,-6.9,-6.2,-7.7,-7.6,-5.8,-7,-6.3,-6.3,-7.6,-7.2,-9.2,-8.8,-10.6,-10.5,-7.6,-7.6,-6.5,-7.1,-8.1,-6.8,-8.6,-9,-9.1,-5.5,-6,-8.2,-9.7,-9.3,-10,-10.8,-11.4,-11,-12.9,-12.2,-8.9,-8.6,-8.4,-8.2,-9.3,-9.7,-10.2,-10.9,-11,-10.6,-11.4,-10.1,-9.4,-9.2,-9,-8.7,-12.6,-8.7,-8.5,-8.7,-9.4,-10.2,-9.5,-8.8,-9.7,-9.4,-8.9,-9.4,-8.5,-8,-9.8,-15.6,-8.1,-9.7,-8,-8.4,-7.9,-7.7,-11.6,-8.7,-9.3,-15.3,-9.7,-8.7,-12,-11.9,-10.4,-11.4,-13.2,-13.3,-11.1,-16,-19.5,-10,-8.1,-10.7,-14,-9.4,-10.3,-18.9,-19.9,-10.1,-11.8,-11.3,-10.5,-8.5,-9.6,-8.7,-9.2,-8.7,-8.4,-8.2,-7.2,-9,-8.4,-6.8,-8,-6.6,-8.3,-9.5,-9.8,-10.6,-9.7,-10.4,-9,-8.6,-8.9,-9.9,-9.1,-6,-8.7,-8.4,-9.6,-8.1,-8.9,-7.8,-9.1,-7.9,-7.9,-7.6,-9.5,-9.5,-10.5,-8.2,-8.3,-9.4,-5.4,-6,-5.1,-7.8,-6.4,-6.4,-8,-7.7,-8.2,-6.9,-5.8,-8.2,-8.6,-5.6,-4.9,-6.6,-6.7,-7.3,-6.3,-6.7,-6.3,-8.5,-8.3,-9.1,-5.6,-5.7,-7,-5.4,-6,-5.3,-6.2,-6.7,-6.6,-7.1,-6.1,-6,-5.5,-3.7,-4.6,-6.8,-5.9,-6.5,-6,-5.3,-6,-5.9,-4.9,-25.3,-26.6,-30.6,-33.3,-28.8,-30.4,-16.5,-11.5,-7,-7.6,-8.2,-6,-6.4,-6,-9.8,-7.1,-9.2,-7.1,-5.7,-6.5,-5.8,-4.9,-3.6,-2.7,-4.6,-5.8,-5.9,-4.5,-3.6,-3.5,-4,-3.7,-3.9,-4.6,-1.6,-5.1,-3.1,-3.2,-2.4,-4.1,-5.7,-4.9,-4.7,-8,-5.1,-4.8,-5.2,-5.6,-4.8,-4,-5.1,-5.2,-5.6,-5.1,-4.7,-7.3,-5.9,-6.8,-6.7,-6.4,-6.3,-6.3,-4.8,-4.9,-6.2,-5.3,-5.9,-6.9,-5.4,-5.3,-6.4,-4.9,-5.4,-5.2,-3.5,-3.8,-4.3,-4.2,-4.7,-4.7,-4.2,-3.6,-8.4,-6.8,-3.6,-5.7,-6.9,-8.7,-3,-8.1,-7.7,-7.9,-8.8,-3.2,-2.7,-3.4,-3,-3.5,-2.2,-3.3,-4.2,-10.8,-5.7,-3,-2.2,-6.1,-7.3,-5.3,-4.3,-21.5,-33.7,-33.1,-29.8,-35.5,-22.9,-18.2,-10.8,-8.8,-8.1,-7.8,-8.8,-9.2,-10.7,-7.8,-8.1,-7.4,-7.3,-12.2,-6.2,-5.1,-6.5,-7.4,-7.8,-7,-8.1,-8.9,-10.8,-9.6,-7.8,-8.6,-7.8,-7.8,-8.1,-7.6,-8.2,-7.3,-6.4,-8.1,-8.1,-7.8,-7.8,-7.7,-7.1,-6.4,-6.6,-5.9,-6.7,-7.7,-13.4,-9.9,-8.3,-10,-11.1,-12.5,-9.8,-7.1,-7.6,-9.7,-9.3,-9.6,-8.7,-7.1,-6.7,-11.1,-11.6,-7.4,-8,-8.2,-6.7,-8,-6,-7.5,-7.6,-6.7,-6.9,-6.5,-6.8,-7.7,-7.1,-6.3,-7.3,-7.5,-7.6,-6,-7.5,-7.8,-8.7,-8.5,-9,-8,-7.2,-7.8,-5.1,-6.8,-7.1,-6.5,-6,-6.8,-8.7,-9.6,-7.6,-7.3,-6.8,-7.2,-6.9,-7.5,-6.5,-7.2,-7,-10.9,-10.9,-8.9,-8,-9.2,-9.6,-9.4,-7.9,-9.8,-11.5,-8.7,-9.2,-11.6,-7.4,-7.5,-10.3,-10.4,-8.5,-6.9,-7.7,-9,-7.7,-7.5,-9.7,-7.5,-8.6,-7.6,-7.5,-8.8,-9,-9.1,-8.6,-8.2,-8,-10.1,-15.7,-15.8,-11.1,-11.2,-15.2,-9,-7.9,-11.6,-7.9,-8.3,-8.5,-10.1,-9.2,-11,-8,-9,-10,-7.8,-9.1,-10.3,-8.7,-9.7,-9.4,-8.8,-7.7,-6.7,-7.1,-7.7,-7.4,-7.5,-5.6,-6.6,-7.3,-6.7,-6.8,-7.5,-8,-9,-8.5,-9.1,-7.3,-8.2,-7.3,-7.2,-7.6,-6.5,-5.3,-6.1,-6.9,-6.8,-6.1,-6.5,-5.5,-7.3,-7.1,-7,-6.6,-6.4,-6.9,-9,-8.6,-7.8,-7.2,-7.2,-7.2,-6.9,-5.8,-5.6,-6.7,-7.3,-5.7,-5,-6.7,-7.4,-7,-6.7,-6.9,-13,-27.5,-33.2,-25.8,-15,-7.7,-2.7,-3.5,-1.9,-2,-2.2,-0.7,-1.5,-2.3,-3.9,-5.7,-3.4,-4.6,-4.8,-3.2,-4.3,-3.2,-3.3,-5.6,-5.8,-3.6,-3.2,-7.3,-9.3,-11.6,-10.2,-11,-10.6,-11.4,-15.5,-12,-12.3,-10.8,-9.8,-11.7,-13.1,-11.1,-8.9,-8.2,-9.7,-11.7,-16.5,-12.8,-11.5,-10.1,-12.3,-10.2,-11.5,-10.9,-11.9,-11.6,-6.9,-8.3,-6.9,-8.8,-7.9,-7.7,-7.2,-9.4,-9.1,-11.4,-8.5,-8.8,-9.3,-7.4,-7.8,-7.6,-11.3,-8.9,-7,-7.8,-8.3,-8.2,-7.6,-9.1,-10.2,-8.5,-7.2,-11.3,-8.5,-8.1,-7.8,-8.1,-13.1,-7.9,-6.5,-9.3,-8,-8.3,-7.3,-8.4,-7.3,-7.9,-8.4,-12.1,-8.2,-7.3,-8.4,-7.8,-8,-7.9,-7,-8.7,-8.4,-6.8,-7.9,-8.1,-10,-12.4,-8.2,-8.4,-9.3,-7.9,-7.8,-7.6,-8,-6.7,-7.4,-7.4,-10.3,-7.5,-6.8,-6.9,-7.6,-7.6,-9.8,-7.4,-7.7,-8.1,-8.6,-8.4,-9.2,-13.6,-12,-10.9,-7.4,-8,-8.3,-7.5,-6.7,-8.5,-9.8,-10.4,-13.3,-15.2,-17,-22,-24.1,-23.4,-14.4,-21,-28.6,-27.3,-15.4,-10.1,-9.3,-9.9,-9.7,-9.5,-8.4,-9.4,-8.2,-7.1,-7.7,-5.9,-9.4,-11.4,-5.3,-4.2,-5.9,-6.6,-5.7,-5,-6.6,-4.5,-5.5,-7.1,-6.3,-4.7,-12,-8.9,-9.2,-9.2,-7.9,-9.4,-8.4,-6.6,-7.9,-8.5,-7.8,-8.1,-7.4,-6.7,-8.9,-8.3,-7.6,-7.9,-9.1,-8.3,-9,-8.1,-6.7,-8.5,-9.2,-8.6,-7.9,-8.9,-9.7,-8.1,-7.8,-11.6,-12.2,-12.5,-10.8,-10.4,-8.9,-8.9,-9.3,-8.7,-9.2,-7.9,-7.4,-10,-8.6,-8.6,-8.6,-7.9,-9.2,-8,-8.8,-8.1,-9.4,-8.3,-9.2,-8.5,-7.6,-8.8,-8.2,-9.1,-8.4,-7.3,-8,-7.8,-7.8,-12.7,-5.7,-8.3,-7.9,-7.2,-7.4,-6.6,-6.6,-7.2,-7,-5,-6.6,-6.6,-6.7,-7.1,-7.1,-9.2,-6.6,-6.6,-7,-7.4,-7.7,-7.8,-5.3,-6.9,-6.4,-7.6,-7.2,-6.5,-5.1,-5.6,-5.9,-6,-6.4,-5.3,-5.8,-5.5,-5.6,-5.9,-16.6,-18.2,-22.5,-20.2,-11,-8.5,-4.8,-7.1,-5.8,-7.9,-6.2,-12.4,-13.4,-12.8,-8.6,-11.3,-10.7,-10.2,-8.6,-11.2,-11.7,-10.2,-9.9,-8.9,-9.5,-10.1,-9.7,-8.8,-8.9,-7.3,-9.6,-8.4,-8.9,-9,-7.7,-8,-7.3,-6.9,-7.1,-7.5,-8.9,-7.9,-6.4,-8.6,-1.9,-8,-4.7,-6.1,-6,-6.5,-7.6,-7.2,-8.3,-7.9,-6.9,-7.3,-5.6,-9.2,-8.7,-8.6,-7.7,-8,-7,-9.3,-8.6,-9,-8.7,-7.3,-7.6,-8,-8.4,-7.2,-7.7,-6.7,-8.1,-6.9,-5.4,-5,-6.1,-8.6,-8.3,-10.2,-7,-7.8,-7.3,-8.2,-8.2,-6.6,-7.8,-7.4,-7.5,-6.8,-7.7,-9.8,-7.5,-9.7,-10.3,-9.9,-9.6,-9.8,-6.5,-8.9,-6.6,-7.4,-9.7,-6.6,-7.3,-7.7,-7.8,-7.9,-6.5,-6.1,-6,-5.5,-5.4,-5.6,-6.3,-5,-5.4,-5.7,-6.1,-5.6,-5.3,-5.9,-5.3,-6.4,-5,-5.1,-7.8,-6.3,-6.6,-4.1,-6.1,-5,-5.8,-5.9,-5.6,-5.4,-5.4,-3.9,-5.4,-5.5,-5,-5,-4.8,-4.7,-6.9,-7.3,-6.8,-9,-8.2,-6.7,-10.6,-9.4,-11,-17.9,-32.9,-29.3,-29.8,-9.9,-8,-8.8,-10.8,-11,-13.7,-14.7,-12,-11.1,-12.8,-9.9,-10.6,-12.4,-11.6,-11.4,-11.5,-12.4,-11.3,-8.8,-9.1,-8.4,-8.5,-7.4,-9.1,-8,-8.5,-8.3,-8.4,-8.5,-7.8,-7.1,-7.9,-7.9,-6.8,-6.9,-7.5,-4.6,-5.4,-5.8,-7.8,-5.4,-4.5,-5,-5.1,-5.3,-3.9,-5.9,-7.2,-5.3,-6.1,-5.3,-3.9,-8.5,-5.7,-5.4,-5,-5.5,-6.7,-5.1,-5.3,-7,-5.7,-5.9,-5.5,-6.8,-5.8,-6,-5.2,-5.6,-5.6,-6.3,-6.2,-5.9,-5.1,-7.7,-6.2,-4.3,-8.1,-29.9,-35.7,-30.5,-11.2,-9.2,-8.9,-7.7,-9,-7.1,-8.5,-8.6,-8.2,-6.9,-7.5,-8.4,-8.1,-7.7,-5.8,-7.1,-7.1,-8.3,-5.7,-7.1,-6.9,-6.1,-6.3,-6,-6.8,-5.4,-6.1,-5.9,-4.8,-5.8,-5.4,-6.4,-5.1,-6.3,-6.7,-6.7,-4.9,-6.2,-6.5,-6.3,-7.6,-7,-6.3,-7.1,-7.5,-6.4,-7.3,-6.7,-8.1,-7.4,-6.3,-5.6,-6,-6,-7,-5.4,-5.4,-6.2,-6.8,-6.2,-6.6,-6.2,-6.7,-5.5,-5.8,-7.3,-6.5,-6.1,-7.3,-7.5,-6.6,-7.3,-6.2,-6.2,-6.4,-6.7,-7.2,-6.8,-5.8,-6.3,-7.1,-6.3,-6.5,-6.7,-6.4,-7,-4.7,-6.6,-6.7,-5.7,-6.5,-5.5,-6.1,-5.3,-6.1,-6.1,-5.5,-6.8,-5.6,-6.7,-6,-6.2,-6.7,-6.6,-6.1,-6.3,-6.3,-6.7,-6.5,-5.9,-6.8,-6.3,-6.4,-6.1,-6.2,-7.1,-7.7,-7.4,-8.3,-7.2,-7.4,-6.9,-5.5,-4.7,-5.1,-5.8,-5.6,-6,-5.6,-5,-6.5,-5.3,-5.1,-6.4,-27.1,-25.3,-32.5,-27.7,-30.9,-25.1,-27.3,-30.2,-19.4,-14.2,-12.6,-17.1,-13.9,-13.2,-15.4,-15.2,-12.9,-12.6,-11.9,-14.1,-13.2,-19.2,-21,-17.9,-16.8,-16.1,-16.6,-17.2,-14,-16.7,-13.5,-15.1,-12.2,-15.6,-11.5,-11.3,-13.8,-9.8,-9.3,-9.4,-8.6,-9.7,-8.2,-10.2,-9.5,-8.8,-9.2,-11.2,-11.3,-11,-11.9,-10.2,-12.8,-10.4,-11.8,-12.7,-12.3,-11.1,-11,-9.8,-9.1,-10.4,-9.6,-10,-13.1,-12,-12.2,-13.9,-14.9,-13,-13.2,-12.2,-13.3,-13,-13.1,-9.4,-12.2,-16.3,-16,-15.6,-17.3,-13.2,-13.6,-13.1,-14.3,-12.8,-12.2,-11.4,-8.8,-10.6,-10.6,-14.5,-11.8,-12.7,-11.9,-9.1,-9.4,-10.7,-11.7,-9.7,-9.8,-11.8,-11.7,-11.4,-10.8,-14.3,-10.4,-7.9,-7.4,-8.9,-9.3,-8.9,-9,-8.8,-7.4,-6.5,-7.3,-6.3,-7.1,-7.6,-15.1,-12.6,-13.7,-10.8,-12.7,-10.3,-10.7,-8.1,-9.8,-10.7,-10.4,-10,-9.8,-10.8,-6.8,-5.9,-10.4,-11.2,-9.4,-8.8,-10.2,-9.7,-11,-11.3,-9.1,-10.1,-7.6,-8.1,-10.4,-7.2,-8.2,-9.1,-10.2,-9.1,-9.1,-11.3,-13,-9.7,-10.8,-15.1,-15.2,-16.7,-18.5,-20.4,-20.9,-27.8,-30.9,-37.4,-30.7,-28.5,-15,-12.3,-9.7,-9.8,-9.4,-11.5,-11.1,-10.1,-9,-10.7,-12,-11.6,-9,-7.5,-6.2,-5.9,-8,-8.8,-8.8,-11.1,-8.3,-7,-7.8,-7.4,-7.4,-7.9,-7.8,-8,-9.6,-8,-7.2,-5.7,-8.2,-4.5,-7.3,-5.4,-7.5,-7.1,-6.7,-7.4,-5.8,-5.1,-5.7,-6,-5.9,-4.7,-6.5,-4.6,-6.3,-5.2,-3.3,-4.2,-5.6,-4.4,-5.2,-5,-4.6,-5,-5.1,-5.9,-6.3,-4,-5.2,-7,-4.6,-6.4,-6.6,-6,-6,-6.7,-6.2,-5.7,-6.8,-6.2,-4.4,-5.3,-4.5,-5.8,-3.4,-3.6,-5.7,-5.8,-5.7,-6.1,-3.8,-5.3,-5.3,-5.1,-6.4,-5.4,-6.2,-6.9,-5.8,-4.7,-5.8,-6.4,-6.9,-5.7,-7.4,-7.3,-5.3,-6.4,-6.1,-6.7,-7.9,-6.8,-7,-6.3,-6.8,-5,-5.6,-6.8,-6.7,-8,-6.8,-7.7,-7.3,-5.1,-6.3,-5.7,-5.4,-5,-5.8,-5.2,-5.2,-5.7,-4.7,-6.2,-5.4,-5.7,-5.8,-5.1,-6.3,-5.9,-5.1,-6,-3.6,-6.3,-6.5,-4.1,-5.6,-4.8,-5.6,-4.9,-6.8,-7.6,-6.5,-6.9,-7.7,-6.8,-7.1,-25.1]
console.log('findIndexesLessThanOrEqualTo\n')

//try1: times misalined after [6]
// gapCount = 10
//findIndexesLessThanOrEqualTo(volumes_full, limit = -23, segmentBreakLength=100)

//try2:
findIndexesLessThanOrEqualTo(volumes_full, limit = -20, segmentBreakLength=100)

